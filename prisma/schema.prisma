generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(cuid())
  firstName          String
  lastName           String
  email              String               @unique
  password           String?
  avatar             String?
  plan               String               @default("LITE")
  status             String               @default("ACTIVE")
  hotmartCustomerId  String?
  expirationDate     DateTime?
  customPermissions  String?              @default("[]")
  passwordCreatedAt  DateTime?
  mustChangePassword Boolean              @default(true)
  loginAttempts      Int                  @default(0)
  lockedUntil        DateTime?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  lastLogin          DateTime?
  loginLogs          LoginLog[]
  resetTokens        PasswordResetToken[]
  purchases          Purchase[]
  carteirasAnalista  CarteiraAnalise[]    @relation("CarteirasAnalista")
  carteiras          CarteiraAnalise[]    @relation("CarteirasUsuario")
  instagramCadastro  InstagramCadastro?
  // ✅ ADICIONAR RELAÇÃO COM RELATÓRIOS
  relatorios         RelatorioSemanal[]
}

model Purchase {
  id                   String   @id @default(cuid())
  userId               String
  amount               Float    // Pode ser negativo para reembolsos (-valor)
  productName          String?
  status               String   @default("COMPLETED") // COMPLETED, REFUNDED, CANCELLED, CHARGEBACK
  hotmartTransactionId String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LoginLog {
  id        String   @id @default(cuid())
  userId    String?
  email     String
  success   Boolean
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
}

model CarteiraAnalise {
  id                      String          @id @default(cuid())
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  nomeArquivo             String
  arquivoUrl              String
  valorTotal              Float?
  quantidadeAtivos        Int?
  status                  String          @default("PENDENTE")
  dataEnvio               DateTime        @default(now())
  dataAnalise             DateTime?
  userId                  String
  analistaId              String?
  feedback                String?
  recomendacoes           String?
  pontuacao               Float?
  riscoBeneficio          String?
  diversificacao          Float?
  questionario            String?
  avaliacaoAdaptacao      Int?
  avaliacaoDiversificacao Int?
  avaliacaoQualidade      Int?
  dadosEstruturados       String?
  ativos                  AtivoCarteira[]
  analista                User?           @relation("CarteirasAnalista", fields: [analistaId], references: [id])
  user                    User            @relation("CarteirasUsuario", fields: [userId], references: [id], onDelete: Cascade)

  @@map("carteiras_analise")
}

model AtivoCarteira {
  id         String          @id @default(cuid())
  createdAt  DateTime        @default(now())
  codigo     String
  quantidade Float
  precoMedio Float
  valorTotal Float
  tipo       String
  setor      String?
  carteiraId String
  carteira   CarteiraAnalise @relation(fields: [carteiraId], references: [id], onDelete: Cascade)

  @@map("ativos_carteira")
}

model InstagramCadastro {
  id                String   @id @default(cuid())
  userId            String   @unique
  instagram         String
  previousInstagram String?
  isUpdated         Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("instagram_cadastros")
}

model HotmartIntegration {
  id          String   @id @default(cuid())
  name        String   // Nome da integração (ex: "Projeto Trump")
  token       String   @unique // Token único para o webhook
  plan        String   // Plano que será atribuído (VIP, LITE, etc.)
  status      String   @default("ACTIVE") // ACTIVE, INACTIVE
  totalSales  Int      @default(0) // Contador de vendas
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("hotmart_integrations")
}

model RelatorioSemanal {
  id        String   @id @default(cuid())
  date      String
  weekOf    String
  
  // ✅ Estrutura JSON para armazenar arrays de objetos
  macro     Json     @default("[]")      // MacroNews[]
  proventos Json     @default("[]")      // DividendoInfo[]
  dividendos Json    @default("[]")      // StockNews[]
  smallCaps Json     @default("[]")      // StockNews[]
  microCaps Json     @default("[]")      // StockNews[]
  exterior  Json     @default("[]")      // StockNews[]
  
  status    String   @default("draft")   // 'draft' | 'published'
  authorId  String
  
  // ✅ ADICIONAR RELAÇÃO COM USER
  author    User     @relation(fields: [authorId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("relatorio_semanal")
}