generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums para o sistema de dúvidas
enum QuestionStatus {
  NOVA
  RESPONDIDA
  FECHADA
}

enum QuestionPriority {
  BAIXA
  NORMAL
  URGENTE
}

enum QuestionCategory {
  SMALL_CAPS
  MICRO_CAPS
  DIVIDENDOS
  FIIS
  INTERNACIONAL_ETFS
  INTERNACIONAL_STOCKS
  INTERNACIONAL_DIVIDENDOS
  PROJETO_AMERICA
  GERAL
  TECNICO
  FISCAL
}

model User {
  id                      String                        @id @default(cuid())
  firstName               String
  lastName                String
  email                   String                        @unique
  password                String?
  avatar                  String?
  plan                    String                        @default("LITE")
  status                  String                        @default("ACTIVE")
  hotmartCustomerId       String?
  expirationDate          DateTime?
  customPermissions       String?                       @default("[]")
  passwordCreatedAt       DateTime?
  mustChangePassword      Boolean                       @default(true)
  loginAttempts           Int                           @default(0)
  lockedUntil             DateTime?
  createdAt               DateTime                      @default(now())
  updatedAt               DateTime                      @updatedAt
  lastLogin               DateTime?
  loginLogs               LoginLog[]
  resetTokens             PasswordResetToken[]
  purchases               Purchase[]
  analisesTrimestrais     AnaliseTrimestreData[]        @relation("AnalisesTrimestrais")
  carteirasAnalista       CarteiraAnalise[]             @relation("CarteirasAnalista")
  carteiras               CarteiraAnalise[]             @relation("CarteirasUsuario")
  instagramCadastro       InstagramCadastro?
  proventoUploads         ProventoUpload[]              @relation("ProventoUploads")
  dividendos              UserDividendos[]
  dividendosInternacional UserDividendosInternacional[]
  etfs                    UserEtfs[]
  exteriorStocks          UserExteriorStocks[]
  fiis                    UserFiis[]
  microCaps               UserMicroCaps[]
  projetoAmerica          UserProjetoAmerica[]
  smallCaps               UserSmallCaps[]
  // Relações do sistema de dúvidas
  userQuestions           Question[]                    @relation("UserQuestions")
  questionsClosed         Question[]                    @relation("QuestionsClosed")  
  adminAnswers            Answer[]                      @relation("AdminAnswers")
  responseTemplates       ResponseTemplate[]            @relation("ResponseTemplates")
  // Relação do sistema de notificações
  notifications           Notification[]                @relation("UserNotifications")
}

model Purchase {
  id                   String   @id @default(cuid())
  userId               String
  amount               Float
  productName          String?
  status               String   @default("COMPLETED")
  hotmartTransactionId String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LoginLog {
  id        String   @id @default(cuid())
  userId    String?
  email     String
  success   Boolean
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
}

model CarteiraAnalise {
  id                      String          @id @default(cuid())
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  nomeArquivo             String
  arquivoUrl              String
  valorTotal              Float?
  quantidadeAtivos        Int?
  status                  String          @default("PENDENTE")
  dataEnvio               DateTime        @default(now())
  dataAnalise             DateTime?
  userId                  String
  analistaId              String?
  feedback                String?
  recomendacoes           String?
  pontuacao               Float?
  riscoBeneficio          String?
  diversificacao          Float?
  questionario            String?
  avaliacaoAdaptacao      Int?
  avaliacaoDiversificacao Int?
  avaliacaoQualidade      Int?
  dadosEstruturados       String?
  ativos                  AtivoCarteira[]
  analista                User?           @relation("CarteirasAnalista", fields: [analistaId], references: [id])
  user                    User            @relation("CarteirasUsuario", fields: [userId], references: [id], onDelete: Cascade)

  @@map("carteiras_analise")
}

model AtivoCarteira {
  id         String          @id @default(cuid())
  createdAt  DateTime        @default(now())
  codigo     String
  quantidade Float
  precoMedio Float
  valorTotal Float
  tipo       String
  setor      String?
  carteiraId String
  carteira   CarteiraAnalise @relation(fields: [carteiraId], references: [id], onDelete: Cascade)

  @@map("ativos_carteira")
}

model InstagramCadastro {
  id                String   @id @default(cuid())
  userId            String   @unique
  instagram         String
  previousInstagram String?
  isUpdated         Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("instagram_cadastros")
}

model HotmartIntegration {
  id         String   @id @default(cuid())
  name       String
  token      String   @unique
  plan       String
  status     String   @default("ACTIVE")
  totalSales Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("hotmart_integrations")
}

model RelatorioSemanal {
  id                     String   @id @default(cuid())
  date                   String
  weekOf                 String
  macro                  Json     @default("[]")
  proventos              Json     @default("[]")
  dividendos             Json     @default("[]")
  smallCaps              Json     @default("[]")
  microCaps              Json     @default("[]")
  exterior               Json     @default("[]")
  status                 String   @default("draft")
  authorId               String
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  autor                  String?
  dataPublicacao         String?
  exteriorDividendos     Json     @default("[]")
  exteriorETFs           Json     @default("[]")
  exteriorProjetoAmerica Json     @default("[]")
  exteriorStocks         Json     @default("[]")
  semana                 String?
  titulo                 String?

  @@map("relatorio_semanal")
}

model UserMicroCaps {
  id                 String   @id @default(cuid())
  userId             String
  ticker             String
  setor              String
  dataEntrada        String
  precoEntrada       Float
  precoTeto          Float?
  precoTetoBDR       Float?
  posicaoEncerrada   Boolean  @default(false)
  dataSaida          String?
  precoSaida         Float?
  motivoEncerramento String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  editadoEm          DateTime @default(now())
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, ticker])
  @@map("user_micro_caps")
}

model UserSmallCaps {
  id                 String   @id @default(cuid())
  userId             String
  ticker             String
  setor              String
  dataEntrada        String
  precoEntrada       Float
  precoTeto          Float?
  posicaoEncerrada   Boolean  @default(false)
  dataSaida          String?
  precoSaida         Float?
  motivoEncerramento String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  editadoEm          DateTime @default(now())
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, ticker])
  @@map("user_small_caps")
}

model UserDividendos {
  id                 String   @id @default(cuid())
  userId             String
  ticker             String
  setor              String
  dataEntrada        String
  precoEntrada       Float
  precoTeto          Float?
  posicaoEncerrada   Boolean  @default(false)
  dataSaida          String?
  precoSaida         Float?
  motivoEncerramento String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  editadoEm          DateTime @default(now())
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, ticker])
  @@map("user_dividendos")
}

model UserFiis {
  id                 String   @id @default(cuid())
  userId             String
  ticker             String
  setor              String
  dataEntrada        String
  precoEntrada       Float
  precoTeto          Float?
  posicaoEncerrada   Boolean  @default(false)
  dataSaida          String?
  precoSaida         Float?
  motivoEncerramento String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  editadoEm          DateTime @default(now())
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, ticker])
  @@map("user_fiis")
}

model UserDividendosInternacional {
  id                 String   @id @default(cuid())
  userId             String
  ticker             String
  setor              String
  dataEntrada        String
  precoEntrada       Float
  precoTeto          Float?
  precoTetoBDR       Float?
  posicaoEncerrada   Boolean  @default(false)
  dataSaida          String?
  precoSaida         Float?
  motivoEncerramento String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  editadoEm          DateTime @default(now())
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, ticker])
  @@map("user_dividendos_internacional")
}

model UserEtfs {
  id                 String   @id @default(cuid())
  userId             String
  ticker             String
  setor              String
  dataEntrada        String
  precoEntrada       Float
  posicaoEncerrada   Boolean  @default(false)
  dataSaida          String?
  precoSaida         Float?
  motivoEncerramento String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  editadoEm          DateTime @default(now())
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, ticker])
  @@map("user_etfs")
}

model UserProjetoAmerica {
  id                 String   @id @default(cuid())
  userId             String
  ticker             String
  setor              String
  dataEntrada        String
  precoEntrada       Float
  precoTeto          Float?
  precoTetoBDR       Float?
  posicaoEncerrada   Boolean  @default(false)
  dataSaida          String?
  precoSaida         Float?
  motivoEncerramento String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  editadoEm          DateTime @default(now())
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, ticker])
  @@map("user_projeto_america")
}

model UserExteriorStocks {
  id                 String   @id @default(cuid())
  userId             String
  ticker             String
  setor              String
  dataEntrada        String
  precoEntrada       Float
  precoTeto          Float?
  precoTetoBDR       Float?
  posicaoEncerrada   Boolean  @default(false)
  dataSaida          String?
  precoSaida         Float?
  motivoEncerramento String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  editadoEm          DateTime @default(now())
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, ticker])
  @@map("user_exterior_stocks")
}

model Provento {
  id             String   @id @default(cuid())
  ticker         String
  valor          Float
  tipo           String
  data           String
  dataObj        DateTime
  dataCom        String?
  dataPagamento  String?
  dataFormatada  String
  valorFormatado String
  dividendYield  Float?
  nomeEmpresa    String?
  setor          String?
  fonte          String?
  observacoes    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([ticker, dataObj, valor, tipo], name: "unique_provento")
  @@index([ticker])
  @@index([dataObj])
  @@index([ticker, dataObj])
  @@index([tipo])
  @@index([createdAt])
  @@map("proventos")
}

model ProventoEstatistica {
  id                 String    @id @default(cuid())
  ticker             String    @unique
  nomeEmpresa        String?
  setor              String?
  totalProventos     Int       @default(0)
  valorTotal         Float     @default(0)
  valorMedio         Float     @default(0)
  ultimoProvento     DateTime?
  primeiroProvento   DateTime?
  totalDividendos    Int       @default(0)
  totalJCP           Int       @default(0)
  totalBonus         Int       @default(0)
  valorDividendos    Float     @default(0)
  valorJCP           Float     @default(0)
  valorBonus         Float     @default(0)
  dividendYieldMedio Float?
  ultimaAtualizacao  DateTime  @default(now())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@index([ticker])
  @@index([ultimaAtualizacao])
  @@map("proventos_estatisticas")
}

model ProventoUpload {
  id                   String    @id @default(cuid())
  nomeArquivo          String
  tamanhoArquivo       Int
  totalLinhas          Int
  linhasProcessadas    Int
  linhasComErro        Int
  tempoProcessamento   Int?
  proventosCriados     Int       @default(0)
  proventosAtualizados Int       @default(0)
  formatoDetectado     String?
  errosDetalhados      String?
  userId               String?
  iniciadoEm           DateTime  @default(now())
  finalizadoEm         DateTime?
  createdAt            DateTime  @default(now())
  user                 User?     @relation("ProventoUploads", fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
  @@map("proventos_uploads")
}

model EventoCorporativo {
  id          String   @id @default(cuid())
  ticker      String
  tipo_evento String
  titulo      String
  data_evento DateTime
  descricao   String
  status      String
  prioridade  String?
  url_externo String?
  observacoes String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("eventos_corporativos")
}

model Relatorio {
  id                String   @id @default(cuid())
  ticker            String
  nome              String
  tipo              String
  dataReferencia    String
  linkCanva         String?
  linkExterno       String?
  tipoVisualizacao  String   @default("iframe")
  arquivoPdf        String?
  nomeArquivoPdf    String?
  tamanhoArquivo    Int?
  tipoPdf           String?
  hashArquivo       String?
  solicitarReupload Boolean  @default(false)
  dataUpload        DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([ticker])
  @@index([tipo])
  @@index([dataUpload])
  @@index([ticker, tipo])
  @@index([ticker, dataReferencia])
  @@map("relatorios")
}

model AnaliseTrimestreData {
  id                     String    @id @default(cuid())
  ticker                 String
  empresa                String
  trimestre              String?
  dataPublicacao         DateTime  @default(now())
  autor                  String?
  categoria              String    @default("resultado_trimestral")
  titulo                 String
  resumoExecutivo        String?
  analiseCompleta        String?
  metricas               Json      @default("{}")
  pontosFavoraveis       String?
  pontosAtencao          String?
  recomendacao           String    @default("MANTER")
  precoAlvo              Float?
  risco                  String    @default("MÉDIO")
  linkResultado          String?
  linkConferencia        String?
  status                 String    @default("draft")
  visualizacoes          Int       @default(0)
  userId                 String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  badges                 Json?     @default("[]")
  dadosPeriodo           Json?     @default("{}")
  fonteDados             String?   @default("manual")
  historicoComparativo   Json?     @default("[]")
  ultimaAtualizacaoBrapi DateTime?
  nota                   Float?
  user                   User?     @relation("AnalisesTrimestrais", fields: [userId], references: [id])

  @@unique([ticker, trimestre, titulo], name: "unique_analise_trimestre")
  @@index([ticker])
  @@index([trimestre])
  @@index([status])
  @@index([categoria])
  @@index([dataPublicacao])
  @@index([ticker, trimestre])
  @@index([ticker, status])
  @@index([userId])
  @@map("analises_trimestrais")
}

// Sistema de Dúvidas - Modelos existentes e novos
model Question {
  id          String           @id @default(cuid())
  title       String
  content     String
  category    QuestionCategory @default(GERAL)
  priority    QuestionPriority @default(NORMAL)
  status      QuestionStatus   @default(NOVA)
  userId      String
  readByAdmin Boolean          @default(false)
  closedAt    DateTime?
  closedBy    String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  // Relacionamentos
  user        User             @relation("UserQuestions", fields: [userId], references: [id], onDelete: Cascade)
  answers     Answer[]
  closer      User?            @relation("QuestionsClosed", fields: [closedBy], references: [id])

  @@index([userId])
  @@index([status])
  @@index([category])
  @@index([createdAt])
  @@index([userId, status])
  @@map("questions")
}

model Answer {
  id           String   @id @default(cuid())
  content      String
  questionId   String
  adminId      String
  isOfficial   Boolean  @default(true)
  readByUser   Boolean  @default(false)
  // Novos campos FAQ
  isFaq        Boolean  @default(false)
  faqTitle     String?
  faqOrder     Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relacionamentos
  question     Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  admin        User     @relation("AdminAnswers", fields: [adminId], references: [id])

  @@index([questionId])
  @@index([adminId])
  @@index([createdAt])
  @@index([isFaq])
  @@index([faqOrder])
  @@map("answers")
}

// Novo modelo para templates de respostas
model ResponseTemplate {
  id          String           @id @default(cuid())
  title       String
  content     String
  category    QuestionCategory @default(GERAL)
  isActive    Boolean          @default(true)
  usageCount  Int              @default(0)
  createdBy   String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  // Relacionamento
  creator     User             @relation("ResponseTemplates", fields: [createdBy], references: [id])

  @@index([category])
  @@index([isActive])
  @@index([createdBy])
  @@index([category, isActive])
  @@map("response_templates")
}

// Sistema de Notificações - NOVO MODELO
model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  message     String
  type        String   @default("info") // 'info', 'success', 'warning', 'error'
  category    String   @default("general") // 'question_answered', 'new_report', 'general'
  read        Boolean  @default(false)
  actionUrl   String? // URL para onde redirecionar ao clicar
  metadata    Json?    @default("{}") // Dados extras (questionId, reportId, etc)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamento
  user        User     @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
  @@index([createdAt])
  @@index([userId, read])
  @@index([category])
  @@index([type])
  @@map("notifications")
}