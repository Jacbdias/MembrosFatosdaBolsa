generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                        @id @default(cuid())
  firstName               String
  lastName                String
  email                   String                        @unique
  password                String?
  avatar                  String?
  plan                    String                        @default("LITE")
  status                  String                        @default("ACTIVE")
  hotmartCustomerId       String?
  expirationDate          DateTime?
  customPermissions       String?                       @default("[]")
  passwordCreatedAt       DateTime?
  mustChangePassword      Boolean                       @default(true)
  loginAttempts           Int                           @default(0)
  lockedUntil             DateTime?
  createdAt               DateTime                      @default(now())
  updatedAt               DateTime                      @updatedAt
  lastLogin               DateTime?
  loginLogs               LoginLog[]
  resetTokens             PasswordResetToken[]
  purchases               Purchase[]
  carteirasAnalista       CarteiraAnalise[]             @relation("CarteirasAnalista")
  carteiras               CarteiraAnalise[]             @relation("CarteirasUsuario")
  instagramCadastro       InstagramCadastro?

  // ✅ NOVO: Relacionamento com análises trimestrais
  analisesTrimestrais     AnaliseTrimestreData[]        @relation("AnalisesTrimestrais")

  // ✅ COMENTADO TEMPORARIAMENTE PARA RESOLVER FK CONSTRAINT
  // relatorios              RelatorioSemanal[]
  dividendos              UserDividendos[]
  dividendosInternacional UserDividendosInternacional[]
  etfs                    UserEtfs[]
  exteriorStocks          UserExteriorStocks[]
  fiis                    UserFiis[]
  microCaps               UserMicroCaps[]
  projetoAmerica          UserProjetoAmerica[]
  smallCaps               UserSmallCaps[]
  
  // ✅ NOVO: Relacionamento com uploads de proventos
  proventoUploads         ProventoUpload[]              @relation("ProventoUploads")
}

model Purchase {
  id                   String   @id @default(cuid())
  userId               String
  amount               Float
  productName          String?
  status               String   @default("COMPLETED")
  hotmartTransactionId String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LoginLog {
  id        String   @id @default(cuid())
  userId    String?
  email     String
  success   Boolean
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
}

model CarteiraAnalise {
  id                      String          @id @default(cuid())
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  nomeArquivo             String
  arquivoUrl              String
  valorTotal              Float?
  quantidadeAtivos        Int?
  status                  String          @default("PENDENTE")
  dataEnvio               DateTime        @default(now())
  dataAnalise             DateTime?
  userId                  String
  analistaId              String?
  feedback                String?
  recomendacoes           String?
  pontuacao               Float?
  riscoBeneficio          String?
  diversificacao          Float?
  questionario            String?
  avaliacaoAdaptacao      Int?
  avaliacaoDiversificacao Int?
  avaliacaoQualidade      Int?
  dadosEstruturados       String?
  ativos                  AtivoCarteira[]
  analista                User?           @relation("CarteirasAnalista", fields: [analistaId], references: [id])
  user                    User            @relation("CarteirasUsuario", fields: [userId], references: [id], onDelete: Cascade)

  @@map("carteiras_analise")
}

model AtivoCarteira {
  id         String          @id @default(cuid())
  createdAt  DateTime        @default(now())
  codigo     String
  quantidade Float
  precoMedio Float
  valorTotal Float
  tipo       String
  setor      String?
  carteiraId String
  carteira   CarteiraAnalise @relation(fields: [carteiraId], references: [id], onDelete: Cascade)

  @@map("ativos_carteira")
}

model InstagramCadastro {
  id                String   @id @default(cuid())
  userId            String   @unique
  instagram         String
  previousInstagram String?
  isUpdated         Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("instagram_cadastros")
}

model HotmartIntegration {
  id         String   @id @default(cuid())
  name       String
  token      String   @unique
  plan       String
  status     String   @default("ACTIVE")
  totalSales Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("hotmart_integrations")
}

model RelatorioSemanal {
  id         String   @id @default(cuid())
  date       String
  weekOf     String
  macro      Json     @default("[]")
  proventos  Json     @default("[]")
  dividendos Json     @default("[]")
  smallCaps  Json     @default("[]")
  microCaps  Json     @default("[]")
  exterior   Json     @default("[]")
  status     String   @default("draft")
  authorId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  // ✅ COMENTADO TEMPORARIAMENTE PARA RESOLVER FK CONSTRAINT
  // author     User     @relation(fields: [authorId], references: [id])

  @@map("relatorio_semanal")
}

model UserMicroCaps {
  id                 String   @id @default(cuid())
  userId             String
  ticker             String
  setor              String
  dataEntrada        String
  precoEntrada       Float
  precoTeto          Float?
  precoTetoBDR       Float?
  posicaoEncerrada   Boolean  @default(false)
  dataSaida          String?
  precoSaida         Float?
  motivoEncerramento String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  editadoEm          DateTime @default(now())
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, ticker])
  @@map("user_micro_caps")
}

model UserSmallCaps {
  id                 String   @id @default(cuid())
  userId             String
  ticker             String
  setor              String
  dataEntrada        String
  precoEntrada       Float
  precoTeto          Float?
  posicaoEncerrada   Boolean  @default(false)
  dataSaida          String?
  precoSaida         Float?
  motivoEncerramento String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  editadoEm          DateTime @default(now())
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, ticker])
  @@map("user_small_caps")
}

model UserDividendos {
  id                 String   @id @default(cuid())
  userId             String
  ticker             String
  setor              String
  dataEntrada        String
  precoEntrada       Float
  precoTeto          Float?
  posicaoEncerrada   Boolean  @default(false)
  dataSaida          String?
  precoSaida         Float?
  motivoEncerramento String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  editadoEm          DateTime @default(now())
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, ticker])
  @@map("user_dividendos")
}

model UserFiis {
  id                 String   @id @default(cuid())
  userId             String
  ticker             String
  setor              String
  dataEntrada        String
  precoEntrada       Float
  precoTeto          Float?
  posicaoEncerrada   Boolean  @default(false)
  dataSaida          String?
  precoSaida         Float?
  motivoEncerramento String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  editadoEm          DateTime @default(now())
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, ticker])
  @@map("user_fiis")
}

model UserDividendosInternacional {
  id                 String   @id @default(cuid())
  userId             String
  ticker             String
  setor              String
  dataEntrada        String
  precoEntrada       Float
  precoTeto          Float?
  precoTetoBDR       Float?
  posicaoEncerrada   Boolean  @default(false)
  dataSaida          String?
  precoSaida         Float?
  motivoEncerramento String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  editadoEm          DateTime @default(now())
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, ticker])
  @@map("user_dividendos_internacional")
}

model UserEtfs {
  id                 String   @id @default(cuid())
  userId             String
  ticker             String
  setor              String
  dataEntrada        String
  precoEntrada       Float
  posicaoEncerrada   Boolean  @default(false)
  dataSaida          String?
  precoSaida         Float?
  motivoEncerramento String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  editadoEm          DateTime @default(now())
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, ticker])
  @@map("user_etfs")
}

model UserProjetoAmerica {
  id                 String   @id @default(cuid())
  userId             String
  ticker             String
  setor              String
  dataEntrada        String
  precoEntrada       Float
  precoTeto          Float?
  precoTetoBDR       Float?
  posicaoEncerrada   Boolean  @default(false)
  dataSaida          String?
  precoSaida         Float?
  motivoEncerramento String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  editadoEm          DateTime @default(now())
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, ticker])
  @@map("user_projeto_america")
}

model UserExteriorStocks {
  id                 String   @id @default(cuid())
  userId             String
  ticker             String
  setor              String
  dataEntrada        String
  precoEntrada       Float
  precoTeto          Float?
  precoTetoBDR       Float?
  posicaoEncerrada   Boolean  @default(false)
  dataSaida          String?
  precoSaida         Float?
  motivoEncerramento String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  editadoEm          DateTime @default(now())
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, ticker])
  @@map("user_exterior_stocks")
}

// =====================================================
// 💰 NOVOS MODELOS PARA SISTEMA DE PROVENTOS
// =====================================================

model Provento {
  id                    String   @id @default(cuid())
  
  // 📊 Dados básicos do provento
  ticker                String   // ITUB4, PETR4, etc.
  valor                 Float    // Valor em reais (ex: 0.50)
  tipo                  String   // "dividendo", "jcp", "jscp", "bonus", etc.
  
  // 📅 Datas (mantendo flexibilidade do sistema atual)
  data                  String   // Data original do CSV (formato string)
  dataObj               DateTime // Data processada como DateTime
  dataCom               String?  // Data com direito (opcional)
  dataPagamento         String?  // Data de pagamento (opcional)
  
  // 📈 Dados calculados/formatados
  dataFormatada         String   // "15/03/2024" - para exibição
  valorFormatado        String   // "R$ 0,50" - para exibição
  dividendYield         Float?   // DY% na época (opcional)
  
  // 🏢 Dados da empresa (desnormalizados para performance)
  nomeEmpresa           String?  // Nome da empresa
  setor                 String?  // Setor da empresa
  
  // 📋 Metadados
  fonte                 String?  // "csv_upload", "manual", "api", etc.
  observacoes           String?  // Observações adicionais
  
  // ⏰ Auditoria
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // 📊 Indexes para performance
  @@index([ticker])                    // Busca por ticker
  @@index([dataObj])                   // Busca por data
  @@index([ticker, dataObj])           // Busca combinada (mais comum)
  @@index([tipo])                      // Busca por tipo
  @@index([createdAt])                 // Ordenação por criação
  
  // 🔍 Constraint para evitar duplicatas
  @@unique([ticker, dataObj, valor, tipo], name: "unique_provento")
  
  @@map("proventos")
}

// 📊 MODELO PARA ESTATÍSTICAS DE PROVENTOS (OPCIONAL - para cache)
model ProventoEstatistica {
  id                    String   @id @default(cuid())
  
  // 📈 Agregações por ticker
  ticker                String   @unique
  nomeEmpresa           String?
  setor                 String?
  
  // 💰 Estatísticas calculadas
  totalProventos        Int      @default(0)           // Quantidade total
  valorTotal            Float    @default(0)           // Soma total em R$
  valorMedio            Float    @default(0)           // Valor médio
  ultimoProvento        DateTime?                      // Data do último provento
  primeiroProvento      DateTime?                      // Data do primeiro provento
  
  // 📊 Estatísticas por tipo
  totalDividendos       Int      @default(0)
  totalJCP              Int      @default(0)
  totalBonus            Int      @default(0)
  
  valorDividendos       Float    @default(0)
  valorJCP              Float    @default(0)
  valorBonus            Float    @default(0)
  
  // 📈 Yield médio (se disponível)
  dividendYieldMedio    Float?
  
  // ⏰ Cache control
  ultimaAtualizacao     DateTime @default(now())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@index([ticker])
  @@index([ultimaAtualizacao])
  
  @@map("proventos_estatisticas")
}

// 🔄 MODELO PARA LOG DE UPLOADS (OPCIONAL - para auditoria)
model ProventoUpload {
  id                    String   @id @default(cuid())
  
  // 📁 Dados do upload
  nomeArquivo           String
  tamanhoArquivo        Int                            // em bytes
  totalLinhas           Int                            // linhas do CSV
  linhasProcessadas     Int                            // linhas válidas
  linhasComErro         Int                            // linhas com erro
  
  // 📊 Estatísticas do processamento
  tempoProcessamento    Int?                           // em milissegundos
  proventosCriados      Int      @default(0)
  proventosAtualizados  Int      @default(0)
  
  // 🔍 Metadados
  formatoDetectado      String?  // "novo_6_colunas", "antigo_4_colunas"
  errosDetalhados       String?  // JSON com detalhes dos erros
  
  // 👤 Relacionamento com usuário (opcional)
  userId                String?
  user                  User?    @relation("ProventoUploads", fields: [userId], references: [id])
  
  // ⏰ Timestamps
  iniciadoEm            DateTime @default(now())
  finalizadoEm          DateTime?
  createdAt             DateTime @default(now())
  
  @@index([userId])
  @@index([createdAt])
  
  @@map("proventos_uploads")
}

model EventoCorporativo {
  id           String   @id @default(cuid())
  ticker       String
  tipo_evento  String
  titulo       String
  data_evento  DateTime
  descricao    String
  status       String
  prioridade   String?
  url_externo  String?
  observacoes  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("eventos_corporativos")

}

model Relatorio {
  id                  String    @id @default(cuid())
  
  // 📊 Dados básicos do relatório
  ticker              String                        // VALE3, PETR4, etc.
  nome                String                        // Nome do relatório
  tipo                String                        // "trimestral", "anual", "apresentacao", "outros"
  dataReferencia      String                        // "Q1 2024", "2023", etc.
  
  // 🔗 Links e visualização
  linkCanva           String?                       // Link do Canva
  linkExterno         String?                       // Link externo genérico
  tipoVisualizacao    String    @default("iframe")  // "iframe", "canva", "link", "pdf"
  
  // 📄 Sistema híbrido de PDFs
  arquivoPdf          String?   @db.Text            // Base64 para PDFs pequenos
  nomeArquivoPdf      String?                       // Nome do arquivo original
  tamanhoArquivo      Int?                          // Tamanho em bytes
  tipoPdf             String?                       // "base64" ou "referencia"
  hashArquivo         String?                       // Hash SHA-256 para verificação
  solicitarReupload   Boolean   @default(false)     // Flag para PDFs grandes
  
  // ⏰ Timestamps
  dataUpload          DateTime  @default(now())     // Data do upload
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  // 📊 Indexes para performance
  @@index([ticker])                                 // Busca por ticker
  @@index([tipo])                                   // Busca por tipo
  @@index([dataUpload])                            // Ordenação por upload
  @@index([ticker, tipo])                          // Busca combinada
  @@index([ticker, dataReferencia])                // Busca ticker + período
  
  @@map("relatorios")

}

// =====================================================
// 📊 MODELO PARA ANÁLISES TRIMESTRAIS
// =====================================================

model AnaliseTrimestreData {
  id                  String   @id @default(cuid())
  
  // 🏢 Informações básicas
  ticker              String                        // TUPY3, VALE3, etc.
  empresa             String                        // Nome da empresa
  trimestre           String?                       // 3T24, Q1 2024, etc.
  dataPublicacao      DateTime @default(now())      // Data de publicação
  autor               String?                       // Nome do autor
  categoria           String   @default("resultado_trimestral") // resultado_trimestral, analise_setorial, tese_investimento
  
  // 📝 Conteúdo principal
  titulo              String                        // Título da análise
  resumoExecutivo     String?  @db.Text             // Resumo executivo (rich text)
  analiseCompleta     String?  @db.Text             // Análise completa (rich text)
  
  // 💰 Métricas financeiras (JSON para flexibilidade)
  metricas            Json     @default("{}")       // { receita: { valor: 1200, unidade: "milhões", variacao: -8.5 }, ... }
  
  // 📊 Análise qualitativa
  pontosFavoraveis    String?  @db.Text             // Pontos positivos (rich text)
  pontosAtencao       String?  @db.Text             // Pontos de atenção (rich text)
  
  // 🎯 Recomendação
  recomendacao        String   @default("MANTER")   // COMPRA, VENDA, MANTER
  precoAlvo           Float?                        // Preço alvo em R$
  risco               String   @default("MÉDIO")    // BAIXO, MÉDIO, ALTO
  
  // 🔗 Links externos
  linkResultado       String?                       // Link do release de resultados
  linkConferencia     String?                       // Link da conference call
  
  // 📋 Status e metadados
  status              String   @default("draft")    // draft, published
  visualizacoes       Int      @default(0)          // Contador de visualizações
  
  // 👤 Relacionamento com usuário (autor)
  userId              String?                       // ID do usuário que criou
  user                User?    @relation("AnalisesTrimestrais", fields: [userId], references: [id])

  // ✅ NOVOS CAMPOS PARA INTEGRAÇÃO BRAPI
  dadosPeriodo            Json?    @default("{}")     // Dados fixos do período (cotação, P/L, etc.)
  historicoComparativo    Json?    @default("[]")     // Histórico dos últimos trimestres
  badges                  Json?    @default("[]")     // Badges automáticos baseados nos dados
  fonteDados              String?  @default("manual") // 'manual', 'brapi', 'misto'
  ultimaAtualizacaoBrapi  DateTime?                   // Timestamp da última sincronização BRAPI
  
  // ⏰ Timestamps
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // 📊 Indexes para performance
  @@index([ticker])                                 // Busca por ticker
  @@index([trimestre])                              // Busca por trimestre
  @@index([status])                                 // Filtro por status
  @@index([categoria])                              // Filtro por categoria
  @@index([dataPublicacao])                         // Ordenação por data
  @@index([ticker, trimestre])                      // Busca combinada
  @@index([ticker, status])                         // Ticker + status
  @@index([userId])                                 // Análises do usuário
  
  // 🔍 Constraint para evitar duplicatas
  @@unique([ticker, trimestre, titulo], name: "unique_analise_trimestre")
  
  @@map("analises_trimestrais")
}